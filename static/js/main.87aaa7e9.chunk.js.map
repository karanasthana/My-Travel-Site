{"version":3,"sources":["staticData/statesData sync /^/.//.*/.json$","Views/CountriesSection.js","Views/Quote.js","pages/HomePage.js","Views/StatePicture.js","Views/StatePlace.js","pages/StatesPage.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","CountriesSection","items","this","props","json","places","item","key","to","pathname","name","className","style","backgroundImage","picture","place","countryName","countryText","React","Component","Quote","backgroundColor","textAlign","fontStyle","fontSize","padding","margin","color","quote","HomePage","India","Singapore","StatePicture","image","height","width","backgroundSize","display","backgroundRepeat","backgroundPosition","stateName","StatePlace","Card","Img","variant","src","Body","Title","StatesPage","console","log","location","require","match","params","substr","text","App","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87aaa7e9.chunk.js","sourcesContent":["var map = {\n\t\"./himachal.json\": 42,\n\t\"./uttarakhand.json\": 43\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 41;","import React from 'react';\nimport './../css/CountriesSection.css';\nimport { Link } from 'react-router-dom';\n\nexport default class CountriesSection extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n      const items = this.props.json.places.map((item, key) =>\n      <Link to={{pathname: `/states/:${item.id}`, id:`${item.id}`, name: `${item.name}` }} id={item.id} className=\"card-sm\" style={{backgroundImage: `url(${item.picture})`}}>\n        {\n          item.place ? \n          <p className=\"card__text-sm\">{`${item.place}`}</p> : \n          null\n        }\n        <h1 className=\"card__text-lg\">{`${item.name}`}</h1>\n      </Link>\n      );\n        return (\n            <div className=\"main main-div\" style={{backgroundImage: `url(${this.props.json.picture})` }}>\n              <section className=\"card-lg__container\">\n                <p className=\"card__text-sm\">{`${this.props.json.countryName}`}</p>\n                <h1 className=\"card__text-lg\">{`${this.props.json.countryText}`}</h1>\n              {/* <p className=\"card__text-md\">something something</p> */}\n              </section>\n              <section className=\"card-sm__container\">\n                {items}\n              </section>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default function Quote(props) {\n    return (\n        <div style={{ backgroundColor: 'black', textAlign: 'center', fontStyle: 'italic' }}>\n            <h2 style={{ fontSize: '2.2rem', padding: '0.83rem', margin: 0, color: '#e9bd39' }}>{props.quote}</h2>\n        </div>\n    );\n}","import React from 'react';\nimport CountriesSection from \"../Views/CountriesSection\";\nimport India from '../staticData/countryData/India.json';\nimport Singapore from '../staticData/countryData/Singapore.json';\nimport Quote from '../Views/Quote';\n// import Slider from '../Views/Slider';\n\nexport default function HomePage() {\n    return (\n        <div>\n            <CountriesSection json={India} />\n            <Quote quote={'Live with no excuses and travel with no regrets'}/>\n            <CountriesSection json={Singapore} />\n            <Quote quote={'The World is a book and those who do not travel read only a page'}/>\n            {/* <Slider />     */}\n        </div>\n    )\n}","import React from 'react';\n\nexport default function StatePicture(props) {\n    return (\n        <div style={{backgroundImage: `url('${props.image}')`, height: '30rem', width: '100%', backgroundSize: 'cover', display: 'flex', textAlign: 'center', backgroundRepeat: 'no-repeat', backgroundPosition: 'center' }} >\n            <h2 style={{ margin: '15rem 0', width: '100%', backgroundColor: '#dddddd44'}}>{props.stateName}</h2>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport './../css/StatePlace.css';\n\nexport default function StatePlace(props) {\n    return (\n        <Card className=\"col-md-3 col-sm-6 col-xs-12 cardContainer\" >\n            <div className=\"cardOuterDiv\">\n                <Card.Img variant=\"top\" src={`${props.picture}`} className=\"cardImg\" />\n                <Card.Body className=\"cardBody\">\n                    <Card.Title className=\"cardTitle\">{`${props.place}`}</Card.Title>\n                </Card.Body>\n            </div>\n        </Card>\n    );\n}","import React from 'react';\nimport Quote from '../Views/Quote';\nimport StatePicture from '../Views/StatePicture';\nimport StatePlace from '../Views/StatePlace';\n\nexport default function StatesPage(props) {\n    console.log(\"The page is --> \" + props.location.id);\n    let json = require(`../staticData/statesData/${props.match.params.id.substr(1)}.json`)\n    const places = json.places.map((item, key) => \n        <StatePlace picture={`${item.picture}`} place={`${item.place}`} key={key} />\n    );\n    return (\n        <div style={{backgroundColor: 'black'}}>\n            <StatePicture image={json.picture} stateName={json.name} />\n            <Quote quote={json.text}/>\n            <div>\n                {places}\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n// import logo from './logo.svg';\nimport './App.css';\n// Import css files\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n// import FullImage from './Views/FullImage';\n// import India from './Views/India';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HomePage from './pages/HomePage';\nimport StatesPage from './pages/StatesPage';\n// import Himachal from './staticData/statesData/Himachal.json';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        {/* <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/states\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n        <div>\n        </div> */}\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path={\"/states/:id\"} name=\"State\" component={StatesPage} />\n          <Route path=\"/\" name=\"Home\" component={HomePage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}